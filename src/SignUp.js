import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import './SignUp.css';
import userIcon from "./assets/icon1.png";
import axios from 'axios';

const SignUp = () => {
    const [departments, setDepartments] = useState([]);
    const [sections, setSections] = useState([]);
    const [tasks, setTasks] = useState([]);
    const [formData, setFormData] = useState({
        username: '',
        password: '',
        confirmPassword: '',
        fullName: '',
        email: '',
        phone: '',
        department_id: '',
        section_id: '',
        task_id: '',
    });

    const [passwordMatch, setPasswordMatch] = useState(true);
    const navigate = useNavigate();

    // ‚úÖ Fetch departments
    useEffect(() => {
        axios.get('http://localhost:5001/api/departments')
            .then(response => {
                setDepartments(response.data);
                console.log("‚úÖ Departments Loaded:", response.data);
            })
            .catch(error => console.error('‚ùå Error fetching departments:', error));
    }, []);
    
    useEffect(() => {
        if (formData.department_id) {
            axios.get(`http://localhost:5001/api/sections/${formData.department_id}`)
                .then(response => {
                    setSections(response.data);
                    console.log("‚úÖ Sections Loaded:", response.data);
                })
                .catch(error => console.error('‚ùå Error loading sections:', error));
        } else {
            setSections([]);
        }
    }, [formData.department_id]);
    
    useEffect(() => {
        if (formData.section_id) {
            axios.get(`http://localhost:5001/api/tasks/${formData.section_id}`)
                .then(response => {
                    setTasks(response.data);
                    console.log("‚úÖ Tasks Loaded:", response.data);
                })
                .catch(error => console.error('‚ùå Error loading tasks:', error));
        } else {
            setTasks([]);
        }
    }, [formData.section_id]);
    

    // ‚úÖ Handle input change
    const handleInputChange = (e) => {
        const { name, value } = e.target;
        
        setFormData(prevState => ({
            ...prevState,
            [name]: value,
            ...(name === "department_id" && { section_id: "", task_id: "" }),
            ...(name === "section_id" && { task_id: "" })
        }));
    
        console.log(`üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ ${name}:`, value); // Debug ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤
    };
    

    // ‚úÖ Handle form submit
    const handleSubmit = async (e) => {
        e.preventDefault();
        console.log("üì§ Form Data ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ Backend:", formData); // Debug ‡∏î‡∏π‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ
        
        const selectedDepartment = departments.find(d => d.id === formData.department_id);
        const selectedSection = sections.find(s => s.id === formData.section_id);
        const selectedTask = tasks.find(t => t.id === formData.task_id);
    
        const userData = {
            username: formData.username,
            password: formData.password,
            fullName: formData.fullName,
            email: formData.email,
            phone: formData.phone,
            department_name: selectedDepartment ? selectedDepartment.name : "", // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ID ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠
            section_name: selectedSection ? selectedSection.name : "",
            task_name: selectedTask ? selectedTask.name : ""
        };
    
        console.log("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÑ‡∏õ Backend:", userData); // Debug
    
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏´‡∏°
        for (const [key, value] of Object.entries(userData)) {
            if (!value) {
                console.error(`‚ùå ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î: ${key}`);
            }
        }
    
        if (!userData.username || !userData.password || !userData.fullName || 
            !userData.email || !userData.phone || !userData.department_name || 
            !userData.section_name || !userData.task_name) {
            alert('‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
            return;
        }
    
        try {
            const response = await axios.post('http://localhost:5001/api/signup', userData, {
                headers: { "Content-Type": "application/json" }
            });
    
            if (response.data.success) {
                alert('‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ IT ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì');
                navigate('/');
            } else {
                alert(response.data.message);
            }
        } catch (error) {
            console.error("‚ùå Signup Error:", error.response?.data?.message);
            alert(error.response?.data?.message || '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å');
        }
    };
    
    
    return (
        <div className="signup-container">
            <div className="signup-box">
                <img src={userIcon} alt="User Icon" className="signup-icon" />
                <h1>Sign Up</h1>
                <form onSubmit={handleSubmit}>
                    <div className="row">
                        <div className="form-group">
                            <label>Username</label>
                            <input type="text" name="username" placeholder="‡∏Å‡∏£‡∏≠‡∏Å Username" onChange={handleInputChange} />
                        </div>
                        <div className="form-group">
                            <label>Password</label>
                            <input type="password" name="password" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" onChange={handleInputChange} />
                        </div>
                    </div>
                    <div className="form-group">
                        <label>Confirm Password</label>
                        <input type="password" name="confirmPassword" placeholder="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" onChange={handleInputChange} />
                        {!passwordMatch && <small style={{ color: 'red' }}>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô</small>}
                    </div>
                    <div className="form-group">
                        <label>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
                        <input type="text" name="fullName" placeholder="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" onChange={handleInputChange} />
                    </div>
                    <div className="row">
                        <div>
                            <label>E-mail</label>
                            <input type="email" name="email" placeholder="example@sat.th" onChange={handleInputChange} />
                        </div>
                        <div>
                            <label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏†‡∏≤‡∏¢‡πÉ‡∏ô</label>
                            <input type="text" name="phone" placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£" onChange={handleInputChange} />
                        </div>
                    </div>
                    <div className="row">
                        <div>
                            <label>‡∏ù‡πà‡∏≤‡∏¢/‡∏™‡∏≥‡∏ô‡∏±‡∏Å</label>
                            <select name="department_id" value={formData.department_id} onChange={handleInputChange}>
                                <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</option>
                                {departments.map(dept => <option key={dept.id} value={dept.id}>{dept.name}</option>)}
                            </select>
                        </div>
                        <div>
                            <label>‡∏Å‡∏≠‡∏á</label>
                            <select name="section_id" value={formData.section_id} onChange={handleInputChange} disabled={!formData.department_id}>
                                <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</option>
                                {sections.map(section => <option key={section.id} value={section.id}>{section.name}</option>)}
                            </select>
                        </div>
                    </div>
                    <div className="form-group">
                        <label>‡∏á‡∏≤‡∏ô</label>
                        <select name="task_id" value={formData.task_id} onChange={handleInputChange} disabled={!formData.section_id}>
                            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</option>
                            {tasks.map(task => <option key={task.id} value={task.id}>{task.name}</option>)}
                        </select>
                    </div>
                    <button type="submit" disabled={!passwordMatch}>Sign Up</button>
                </form>
            </div>
        </div>
    );
};

export default SignUp;
